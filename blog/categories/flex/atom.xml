<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flex | BBBlog]]></title>
  <link href="http://www.bbramley.com/blog/categories/flex/atom.xml" rel="self"/>
  <link href="http://www.bbramley.com/"/>
  <updated>2016-08-02T16:53:14+10:00</updated>
  <id>http://www.bbramley.com/</id>
  <author>
    <name><![CDATA[Ben Bramley]]></name>
    <email><![CDATA[ben@bbramley.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Flex and XML Over HTTP]]></title>
    <link href="http://www.bbramley.com/blog/2011/03/21/flex-and-xml-over-http/"/>
    <updated>2011-03-21T23:09:49+11:00</updated>
    <id>http://www.bbramley.com/blog/2011/03/21/flex-and-xml-over-http</id>
    <content type="html"><![CDATA[<p>I’ve recently been building a flex based GUI and wanted to populate certain UI components using some XML returned via a Java Servlet. I thought this would be very simple using the <strong>mx:xml</strong> tag. However it turns out that the <strong>mx:xml</strong> tag does not support dynamic content (it populates at compile time and does not update at runtime).</p>

<p>So instead I needed to use the <strong>mx:HTTPService</strong> tag and use this to return the XML as a variable which can then be assigned to my UI components. I also need to create methods to handle success and fail of calling the HTTP Service:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>![CDATA[
</span><span class='line'>private var xmldata:XML;
</span><span class='line'>private function initData():void {
</span><span class='line'>    uielement = new UIElement(xmldata);
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>private function xmlResultSuccess( event:ResultEvent ):void {
</span><span class='line'>    xmldata = event.result as XML; initData();
</span><span class='line'>}&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>private function xmlResultFailure( event:FaultEvent ):void {
</span><span class='line'>    Alert.show( event.fault.message, &ldquo;Error loading XML&rdquo; );
</span><span class='line'>}
</span><span class='line'>]]&gt;</span></code></pre></td></tr></table></div></figure></p>

<p>Here we have defined a variable xmldata to hold the xml content. We populate this data using the HTTP Service tag. We then create the UI element, passing in the XML we obtained from the Servlet. Simples.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Java Functionality to Flash Builder Standalone]]></title>
    <link href="http://www.bbramley.com/blog/2011/01/24/adding-java-functionality-to-flash-builder-standalone/"/>
    <updated>2011-01-24T23:10:25+11:00</updated>
    <id>http://www.bbramley.com/blog/2011/01/24/adding-java-functionality-to-flash-builder-standalone</id>
    <content type="html"><![CDATA[<p>I was surprised whilst using Flash Builder that when I tried to open a <strong>.java</strong> file it tried to fire up XCode instead of opening the file in Flash Builder.</p>

<p>This is because even though Flash Builder is essentially Eclipse underneath the Java support is not installed by default.</p>

<p>To add support for Java:</p>

<ol>
<li>Open Flash Builder</li>
<li>Click Help - Install New Software…</li>
<li>At the top of the dialog, click “Add…” to add an update site URL</li>
<li>Specify a name (I chose Java) and add this URL <a href="http://download.eclipse.org/releases/galileo/">http://download.eclipse.org/releases/galileo/</a></li>
<li>Press OK.</li>
<li>In the table of features, expand “Programming Languages” and select “Eclipse Java Development Tools”</li>
<li>Finish the wizard Restart Flash Builder and you should be good to go with Java support.</li>
</ol>

]]></content>
  </entry>
  
</feed>
